{
  "rules": {
    ".read": true,
    ".write": false,

    // User profiles are only readable/writable by the user who owns it
    "users": {
      "$UID": {
        ".read": "auth.uid == $UID",
        ".write": "auth.uid == $UID"
      }
    },

    // Posts can be read by anyone but only written by logged-in users.
    "posts": {
      ".read": true,
      ".write": "auth.uid != null",

      "$POSTID": {
        // UID must match logged in user and is fixed once set
        "uid": {
          ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
        },

        // User can only update own stars
        "stars": {
          "$UID": {
              ".validate": "auth.uid == $UID"
          }
        }
      }
    },

    // User posts can be read by anyone but only written by the user that owns it,
    // and with a matching UID
    "user-posts": {
      ".read": true,

      "$UID": {
        "$POSTID": {
          ".write": "auth.uid == $UID",
        	".validate": "data.exists() || newData.child('uid').val() == auth.uid"
        }
      }
    },

    // Comments can be read by anyone but only written by a logged in user
    "post-comments": {
      ".read": true,
      ".write": "auth.uid != null",

      "$POSTID": {
        "$COMMENTID": {
          // UID must match logged in user and is fixed once set
          "uid": {
              ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
          }
        }
      }
    },

    // Posts can be read by anyone but only written by logged-in users.
    "seat-posts": {
      ".read": true,
      ".write": "auth.uid != null",

      "$SEATPOSTID": {
        // UID must match logged in user and is fixed once set
        "uid": {
          ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
        },

        // User can only update own stars
        "stars": {
          "$UID": {
            ".validate": "auth.uid == $UID"
          }
        }
      }
    },

    // User posts can be read by anyone but only written by the user that owns it,
    // and with a matching UID
    "user-seat-posts": {
      ".read": true,

      "$UID": {
        "$SEATPOSTID": {
          ".write": "auth.uid == $UID",
          ".validate": "data.exists() || newData.child('uid').val() == auth.uid"
        }
      }
    },

    // Comments can be read by anyone but only written by a logged in user
    "seat-posts-comments": {
      ".read": true,
      ".write": "auth.uid != null",

      "$SEATPOSTID": {
        "$COMMENTID": {
          // UID must match logged in user and is fixed once set
          "uid": {
            ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
          }
        }
      }
    },



    // Elections can be read by anyone but only written by logged-in users.
    "elections": {
      ".read": true,
      ".write": "auth.uid != null",

      "$ELECTIONID": {
        // UID must match logged in user and is fixed once set
        "uid": {
          ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
        },

        // User can only update own stars
        "stars": {
          "$UID": {
            ".validate": "auth.uid == $UID"
          }
        }
      }
    },

    // User elections can be read by anyone but only written by the user that owns it,
    // and with a matching UID
    "user-elections": {
      ".read": true,

      "$UID": {
        "$ELECTIONID": {
          ".write": "auth.uid == $UID",
          ".validate": "data.exists() || newData.child('uid').val() == auth.uid"
        }
      }
    },

    // Comments can be read by anyone but only written by a logged in user
    "election-comments": {
      ".read": true,
      ".write": "auth.uid != null",

      "$ELECTIONID": {
        "$COMMENTID": {
          // UID must match logged in user and is fixed once set
          "uid": {
            ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
          }
        }
      }
    },



    // Elections can be read by anyone but only written by logged-in users.
    "election-categories": {
      ".read": true,
      ".write": "auth.uid != null",

      "$ELECTIONCATEGORYID": {
        // UID must match logged in user and is fixed once set
        "uid": {
          ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
        },

        // User can only update own stars
        "stars": {
          "$UID": {
            ".validate": "auth.uid == $UID"
          }
        }
      }
    },

    // User elections can be read by anyone but only written by the user that owns it,
    // and with a matching UID
    "user-election-categories": {
      ".read": true,

      "$UID": {
        "$ELECTIONCATEGORYID": {
          ".write": "auth.uid == $UID",
          ".validate": "data.exists() || newData.child('uid').val() == auth.uid"
        }
      }
    },

    // Comments can be read by anyone but only written by a logged in user
    "election-category-comments": {
      ".read": true,
      ".write": "auth.uid != null",

      "$ELECTIONCATEGORYID": {
        "$COMMENTID": {
          // UID must match logged in user and is fixed once set
          "uid": {
            ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
          }
        }
      }
    },



    // Elections can be read by anyone but only written by logged-in users.
    "election-locations": {
      ".read": true,
      ".write": "auth.uid != null",

      "$ELECTIONLOCATIONID": {
        // UID must match logged in user and is fixed once set
        "uid": {
          ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
        },

        // User can only update own stars
        "stars": {
          "$UID": {
            ".validate": "auth.uid == $UID"
          }
        }
      }
    },

    // User elections can be read by anyone but only written by the user that owns it,
    // and with a matching UID
    "user-election-locations": {
      ".read": true,

      "$UID": {
        "$ELECTIONLOCATIONID": {
          ".write": "auth.uid == $UID",
          ".validate": "data.exists() || newData.child('uid').val() == auth.uid"
        }
      }
    },

    // Comments can be read by anyone but only written by a logged in user
    "election-location-comments": {
      ".read": true,
      ".write": "auth.uid != null",

      "$ELECTIONLOCATIONID": {
        "$COMMENTID": {
          // UID must match logged in user and is fixed once set
          "uid": {
            ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
          }
        }
      }
    },



    // Elections can be read by anyone but only written by logged-in users.
    "election-candidates": {
      ".read": true,
      ".write": "auth.uid != null",

      "$ELECTIONCANDIDATEID": {
        // UID must match logged in user and is fixed once set
        "uid": {
          ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
        },

        // User can only update own stars
        "stars": {
          "$UID": {
            ".validate": "auth.uid == $UID"
          }
        }
      }
    },

    // User elections can be read by anyone but only written by the user that owns it,
    // and with a matching UID
    "user-election-candidates": {
      ".read": true,

      "$UID": {
        "$ELECTIONCANDIDATEID": {
          ".write": "auth.uid == $UID",
          ".validate": "data.exists() || newData.child('uid').val() == auth.uid"
        }
      }
    },

    // Comments can be read by anyone but only written by a logged in user
    "election-candidate-comments": {
      ".read": true,
      ".write": "auth.uid != null",

      "$ELECTIONCANDIDATEID": {
        "$COMMENTID": {
          // UID must match logged in user and is fixed once set
          "uid": {
            ".validate": "(data.exists() && data.val() == newData.val()) || newData.val() == auth.uid"
          }
        }
      }
    }
  }
}